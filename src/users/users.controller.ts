import { Controller, Post, Get, Body, UsePipes, UseGuards, ValidationPipe, Req } from '@nestjs/common';
import { Request } from 'express';
import { UsersService } from './users.service';
import { RegisterUserDto } from './dto/register-user.dto';
import { AuthGuard } from '@nestjs/passport';
import { UnauthorizedException } from '@nestjs/common';
import { RolesGuard } from '../common/guards/roles.guard'; // üõ°Ô∏è Import du guard
import { Roles } from '../common/decorators/roles.decorator'; // üé≠ Import du d√©corateur
import { Role } from '../common/enums/role.enum'; // üé≠ Import de l'enum des r√¥les

interface AuthenticatedRequest extends Request {
  user?: { id: number; email: string; role: string };
}

@Controller('users')
export class UsersController {
  constructor(private usersService: UsersService) {}

  @Post('register')
  @UsePipes(new ValidationPipe({ whitelist: true }))
  async register(@Body() body: RegisterUserDto) {
    console.log('Donn√©es re√ßues:', body);
    return this.usersService.register(body.email, body.password);
  }  

  @Post('login')
  login(@Body() body: RegisterUserDto) {
    return this.usersService.login(body.email, body.password);
  }

  // ‚úÖ Route prot√©g√©e : acc√®s au compte utilisateur r√©serv√© aux "user"
  @UseGuards(AuthGuard('jwt'), RolesGuard) // üõ°Ô∏è Ajout du guard des r√¥les
  @Roles(Role.USER) // üé≠ Seuls les utilisateurs ayant le r√¥le "user" peuvent acc√©der √† cette route
  @Get('account')
  async getProfile(@Req() request: AuthenticatedRequest) {
    console.log('Utilisateur r√©cup√©r√©:', request.user);
    if (!request.user) throw new UnauthorizedException();
    return request.user;
  }
}